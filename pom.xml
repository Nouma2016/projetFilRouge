<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- The pom.xml file is used to configure Maven, a build manager that will handle the configuration and the compilation of the project. -->

    <modelVersion>4.0.0</modelVersion>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>

    <!-- Every project/application is uniquely defined in Maven with a "groupId" (package) and an "artifactId" (app or library name). -->
    <groupId>fr.ecp.sio</groupId>
    <artifactId>filrouge-api</artifactId>

    <!-- You can define properties (version numbers, etc.) and reuse them later in the configuration. -->
    <properties>
        <app.id>your-app-id</app.id>
        <app.version>1</app.version>
        <appengine.version>1.9.44</appengine.version>
        <gcloud.plugin.version>2.0.9.130.v20161013</gcloud.plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
        <archiveClasses>true</archiveClasses>
    </properties>

    <prerequisites>
        <maven>3.3.9</maven>
    </prerequisites>

    <!-- Here you can link your project with existing libraries, available on Maven Central Repository: http://search.maven.org/ -->
    <dependencies>

        <!-- javax.servlet provides base classes to create a web app with Java (Servlet, etc.) -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <!-- The "provided" scope means this library doesn't need to be included with the project, it will be provided directly by the server. -->
            <scope>provided</scope>
        </dependency>

        <!-- Here we added two external libraries for JSON encoding and MySQL connection. -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.7</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
          <!-- <version>6.0.4</version>-->
            <version>5.1.35</version>
        </dependency>

    </dependencies>

    <!-- Here we configure various plugins to assist the compilation, run and deployment of the project. -->
    <!-- Each plugin provides Maven "goals", available in IntelliJ on the Maven right panel, that can be run directly from the IDE to perform actions. -->
    <build>
        <outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>
        <plugins>

            <!-- This plugin performs the packaging of the project as a Java web archive (*.war). -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <archiveClasses>true</archiveClasses>
                    <webResources>
                        <!-- in order to interpolate version from pom into appengine-web.xml -->
                        <resource>
                            <directory>${basedir}/src/main/webapp/WEB-INF</directory>
                            <filtering>true</filtering>
                            <targetPath>WEB-INF</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <!-- Two plugins, provided by Google, to easily deploy the project to Google App Engine. -->
            <plugin>
                <groupId>com.google.appengine</groupId>
                <artifactId>appengine-maven-plugin</artifactId>
                <version>${appengine.version}</version>
                <configuration>
                    <enableJarClasses>false</enableJarClasses>
                    <version>${app.version}</version>
                    <!-- Comment in the below snippet to bind to all IPs instead of just localhost -->
                    <!-- address>0.0.0.0</address>
                    <port>8080</port -->
                    <!-- Comment in the below snippet to enable local debugging with a remote debugger
                         like those included with Eclipse or IntelliJ -->
                    <!-- jvmFlags>
                      <jvmFlag>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</jvmFlag>
                    </jvmFlags -->
                </configuration>
            </plugin>
            <plugin>
              <groupId>com.google.appengine</groupId>
              <artifactId>gcloud-maven-plugin</artifactId>
              <version>${gcloud.plugin.version}</version>
              <configuration>
                <set_default>true</set_default>
              </configuration>
            </plugin>

            <!-- Here we added a basic web server (Jetty) to test the project locally. -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.3.13.v20161014</version>
                <configuration>
                    <stopPort>8081</stopPort>
                    <stopKey>key</stopKey>
                </configuration>
            </plugin>

        </plugins>
    </build>
</project>
